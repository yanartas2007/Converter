import logging

from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler

from markups import *
from valutes import *

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

convertation_data = {}


async def echo(update, context):  # –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –∫ —Ä—É–±–ª—é –≤–∞–ª—é—Ç—ã
    m = valute_normal_name(update.message.text)
    try:
        data = take_data(m)
        await update.message.reply_text(f"{data['Name']} –∫—É—Ä—Å –∫ —Ä—É–±–ª—é {data['Value']}")
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –≤–∞–ª—é—Ç–∞. –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É: /help", reply_markup=standart_markup)


async def start(update, context): # —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ —É–∑–Ω–∞–µ—à—å –µ–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—éü§ë", reply_markup=standart_markup
    )


async def help_command(update, context): # –ø–æ–º–æ—â—å
    await update.message.reply_text("""–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ("USD"="–î–æ–ª–ª–∞—Ä –°–®–ê"="840"), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é
    /start –Ω–∞—á–∞—Ç—å
    /help –ø–æ–º–æ—â—å
    /all –∫—É—Ä—Å –≤—Å–µ—Ö –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é
    /conversation –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ç–æ—Ä—É—é –≤ –ø–µ—Ä–≤–æ–π
    """, reply_markup=standart_markup)


async def stop(update, context): # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ conversation
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", reply_markup=standart_markup)
    return ConversationHandler.END


async def convert(update, context): # –ø–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Ç
    await update.message.reply_text("–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ /stop —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É",
                                    reply_markup=conversation_markup)
    return 1


async def all(update, context): # —Å–ø—Ä–∞–≤–∫–∞ –æ –≤—Å–µ—Ö –≤–∞–ª—é—Ç–∞—Ö
    text = []
    a = take_data()['Valute']
    for i in a.keys():
        text.append(a[i]['Name'] + f' ({a[i]["NumCode"]}, {a[i]["CharCode"]})' + ' ' + ' –∫—É—Ä—Å –∫ —Ä—É–±–ª—é ' + str(a[i]['Value']))
    await update.message.reply_text('\n\n'.join(text), reply_markup=standart_markup)


async def response1(update, context):
    m = valute_normal_name(update.message.text)
    convertation_data[str(update.effective_user.mention_html())] = dict()
    convertation_data[str(update.effective_user.mention_html())]['v1'] = m
    if is_valute_name(m):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã", reply_markup=conversation_markup_numbers)
        return 2
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã",
                                        reply_markup=conversation_markup)
        return 1


async def response2(update, context):
    m = valute_normal_name(update.message.text)
    convertation_data[str(update.effective_user.mention_html())]['c1'] = m
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É", reply_markup=conversation_markup)
    return 3


async def response3(update, context):
    m = update.message.text
    m = valute_normal_name(m)
    convertation_data[str(update.effective_user.mention_html())]['v2'] = m
    if is_valute_name(m):
        pass
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã",
                                        reply_markup=conversation_markup)
        return 3
    try:
        data = take_data()['Valute']
        a = float(data[convertation_data[str(update.effective_user.mention_html())]['v1']]['Value'])
        b = float(
            convertation_data[str(update.effective_user.mention_html())]['c1'])
        c = float(
            data[convertation_data[str(update.effective_user.mention_html())]['v2']]['Value'])
        res = a * b / c
        await update.message.reply_text(
            f"{convertation_data[str(update.effective_user.mention_html())]['c1']} {convertation_data[str(update.effective_user.mention_html())]['v1']}\n"
            f" = \n{res} {convertation_data[str(update.effective_user.mention_html())]['v2']}", reply_markup=standart_markup)
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")
    return ConversationHandler.END


def main():
    application = Application.builder().token('7224928959:AAG5moeq49BuT_kUGJo6C3a3_vJxEMInRlc').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("all", all))

    application.add_handler(ConversationHandler(
        entry_points=[CommandHandler('convert', convert)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, response1)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, response2)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, response3)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    ))

    application.add_handler(MessageHandler(filters.TEXT, echo))



    application.run_polling()


if __name__ == '__main__':
    main()
